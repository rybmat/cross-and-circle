GET /rest/players/ 
returns:
	[
		{
			"username": string,
			"email":	string,
            "url":      string, // url to player
            "games":    string, // url to games played by player
            "stats":    string, // url to stats of player
		},
		{
            "username": string,
            "email":    string,
            "url":      string, // url to player
            "games":    string, // url to games played by player
            "stats":    string, // url to stats of player
        },
		.
		.		
	]


POST /rest/players/ 
takes:
{
	"username": string,	 	// required
	"email":	string,
	"password": string,		// required
}
returns 201:
{
	"username": string,
	"email":	string,
},
or 400 with errors if request is invalid:


GET /rest/players/{playername}
returns 200:
{
    "username": string,
    "email":    string,
    "url":      string, // url to player
    "games":    string, // url to games played by player
    "stats":    string, // url to stats of player
},
or 404 if playername not found:
{
    "detail": "Not found."
}


PUT /rest/players/{playername}
takes:
{
	"username": string,     // required
    "email":    string,
    "password": string,     // required
}	
returns 200:
{
    "username": string,
    "email":    string,
    "url":      string, // url to player
    "games":    string, // url to games played by player
    "stats":    string, // url to stats of player
},
or 404 if playername not found:
{
    "detail": "Not found."
}
or 400 if data is not valid


PATCH /rest/players/{playername}
takes:
{
    "username": string,
    "email":    string,
    "password": string,
}   
returns 200:
{
    "username": string,
    "email":    string,
    "url":      string, // url to player
    "games":    string, // url to games played by player
    "stats":    string, // url to stats of player
},
or 404 if playername not found:
{
    "detail": "Not found."
}
or 400 if data is not valid


GET /rest/players/{player_name}/games/
returns 200:
[
    {
        "player_b": string,
        "player_a": string,
        "started": date,
        "winner": string or null,
        "finished": date or null,
        "id": integer,
        "url": string
    },
    .
    .
]
or 404 if playername or opponent not found:
{
    "detail": "Not found."
}


GET /rest/players/{player_name}/stats/
returns 200:
    {
        "games": integer,
        "won": integer,
        "lost": integer
    }
or 404 if playername or opponent not found:
{
    "detail": "Not found."
}


GET /rest/games/
returns 200:
[
    {
        "player_b": string,
        "player_a": string,
        "started": date,
        "winner": string or null,
        "finished": date or null,
        "id": integer,
        "url": string
    },
    .
    .
]


GET /rest/games/{game_id}/
returns 200:
{
        "player_b": string,
        "player_a": string,
        "started": date,
        "winner": string or null,
        "finished": date or null,
        "id": integer,
        "url": string
},
or 404 when game_id does not exist


GET /rest/games/{game_id}/moves/
returns 200:
[
    {
        "timestamp": "2015-04-26T11:58:14.940Z",
        "game": 9,
        "position": 0,
        "player": "ryba"
    },
    .
    .
]


POST /rest/games/{game_id}/moves/
takes:
{
	"position": integer,
}
returns 201:
{
    "winner": string or null,
    "move": {
        "timestamp": date,
        "game": integer,
        "position": integer,
        "player": string
    }
}
or 400 when turn of other player, player out of game, player does not exist, game finished


GET /rest/requests/
returns 200:
[
	{
	    "date": date,
	    "requested": string,
	    "id": integer,
	    "requesting": string,
        "url": string
	}
	.
	.
]

POST /rest/requests/
takes:
{
	"requested": string,
}
returns 201:
{
    "date": date,
    "requested": string,
    "id": integer,
    "requesting": string,
    "url": stirng
}
or 400 if requested or requesting username does not exists


GET /rest/requests/{id}
returns 200:
{
    "date": date,
    "requested": string,
    "id": integer,
    "requesting": string,
    "url": string
}
or 404 when there is no request with given id


DELETE /rest/requests/{id}
returns 204


POST /rest/accepted-requests/
takes:
{
	"request-id": integer,
}
returns 201:
{
    "player_b": string,
    "player_a": string,
    "started": date,
    "winner": null,
    "finished": null,
    "id": 12	// game id
    "url": string
}





